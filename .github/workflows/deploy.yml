name: deployment workflow

on:
  push:
    branches:
      - main
      - rec

  workflow_dispatch:

jobs:
  security:
    name: TruffleHog Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  run:
    needs: security
    environment:
      name: "${{ github.ref_name }}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract environment
        run: |
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          GENV=$([[ $BRANCH == 'main' ]] && echo 'production' || echo 'unknown')
          GENV=$([[ $BRANCH == 'rec' ]] && [[ $GENV == 'unknown' ]] && echo 'stagging' || echo $GENV)
          echo "env=$GENV" >> $GITHUB_OUTPUT
          echo "env=$GENV"
        id: extract-env

      - name: Create docker env
        run: |
          touch .env
          echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env
          echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env
          echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env
          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env

      - name: Create backend env
        working-directory: ./backend
        run: |
          touch .env
          echo ENV=production >> .env
          echo DATABASE_URL="postgresql://${{ vars.DATABASE_USER }}:${{ secrets.DATABASE_PASS }}@db:5432/${{ vars.DATABASE_NAME }}?schema=public" >> .env
          echo DATABASE_KIND=postgres >> .env
          echo DATABASE_HOST=db >> .env
          echo DATABASE_PORT=5432 >> .env
          echo DATABASE_NAME=${{ vars.DATABASE_NAME }} >> .env
          echo DATABASE_USER=${{ vars.DATABASE_USER }} >> .env
          echo DATABASE_PASS=${{ secrets.DATABASE_PASS }} >> .env
          echo REDIS_HOST=redis >> .env
          echo REDIS_USERNAME= >> .env
          echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env
          echo REDIS_PORT=6379 >> .env
          echo REDIS_USE_TLS=false >> .env
          echo BASE_URL=${{ vars.BASE_URL }} >> .env

      - name: Create frontend env
        working-directory: frontend
        run: |
          touch .env
          echo VITE_ENV=production >> .env
          echo VITE_API_URL=http://api:3000 >> .env
      - name: Login to docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_KEY }}
          registry: rg.fr-par.scw.cloud/rl-idle

      - name: Build the api docker image
        run: |
          # Api
          docker build . -t rg.fr-par.scw.cloud/rl-idle/api-${{ steps.extract-env.outputs.env }}:latest -f ./backend/Dockerfile 
          docker push rg.fr-par.scw.cloud/rl-idle/api-${{ steps.extract-env.outputs.env }}:latest

      - name: Build the app docker image
        run: |
          # App
          docker build . -t rg.fr-par.scw.cloud/rl-idle/app-${{ steps.extract-env.outputs.env }}:latest -f ./frontend/Dockerfile 
          docker push rg.fr-par.scw.cloud/rl-idle/app-${{ steps.extract-env.outputs.env }}:latest

      - name: Push docker compose
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          ssh -p ${{ vars.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ${{ secrets.SOURCE_PATH }}"
          scp -P ${{ vars.SSH_PORT }} docker/docker-compose.${{ steps.extract-env.outputs.env }}.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.SOURCE_PATH }}/docker-compose.yml
          scp -P ${{ vars.SSH_PORT }} .env ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.SOURCE_PATH }}/.env

      - name: Deploy to ${{ steps.extract-env.outputs.env }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ vars.SSH_PORT }}
          envs: REGISTRY_USERNAME, REGISTRY_KEY
          script: |
            cd ${{ secrets.SOURCE_PATH }}
            set -a
            source .env
            docker login rg.fr-par.scw.cloud/rl-idle -u '${{ secrets.REGISTRY_USERNAME }}' -p '${{ secrets.REGISTRY_KEY }}'
            docker compose pull
            docker system prune -f
            docker compose up -d
